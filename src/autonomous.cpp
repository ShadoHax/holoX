#include "main.h"
#include "robo-dark.hpp"

using namespace pros;

std::vector<std::tuple<int, int, bool, bool, bool, bool, bool, bool, bool, bool>> roller_side_data = {(-102, 0, false, false, false, false, false, false, false, false), (-127, 0, false, false, false, false, false, false, false, false), (-127, 0, false, false, false, false, false, false, false, false), (-127, 0, false, false, false, false, false, false, false, false), (-127, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false)};

void roller_side() {
    constexpr std::tuple<int, int, bool, bool, bool, bool, bool, bool, bool, bool>
    for (std::tuple<int, int, bool, bool, bool, bool, bool, bool, bool, bool> input: inputs) 
    {

    }

};
