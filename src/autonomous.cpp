#include "main.h"
#include "robo-dark.hpp"

using namespace pros;



void roller_side() {
    std::vector<std::tuple<int, int, bool, bool, bool, bool, bool, bool, bool, bool>> roller_side_data = {(-102, 0, false, false, false, false, false, false, false, false), (-127, 0, false, false, false, false, false, false, false, false), (-127, 0, false, false, false, false, false, false, false, false), (-127, 0, false, false, false, false, false, false, false, false), (-127, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false)};
    constexpr std::tuple<int, int, bool, bool, bool, bool, bool, bool, bool, bool>
    for (std::tuple<int, int, bool, bool, bool, bool, bool, bool, bool, bool> input: roller_side_data) 
    {
        Robot::ghostdriver(0, 0, false, false, false, false, false, false, false, false, true, true);
        Robot::ghostdriver(input[0], input[1], input[2], input[3], input[4], input[5], input[6], input[7], input[8], input[9], false, false);

    }

};

void other_side() {
    std::vector<std::tuple<int, int, bool, bool, bool, bool, bool, bool, bool, bool>> other_side_data = {(0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 47, false, false, false, false, false, false, false, false), (-23, 127, false, false, false, false, false, false, false, false), (-127, 127, false, false, false, false, false, false, false, false), (-127, 127, false, false, false, false, false, false, false, false), (-127, 127, false, false, false, false, false, false, false, false), (-127, 127, false, false, false, false, false, false, false, false), (-127, 127, false, false, false, false, false, false, false, false), (-114, 122, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, -25, false, false, false, false, false, false, false, false), (0, -127, false, false, false, false, false, false, false, false), (0, -127, false, false, false, false, false, false, false, false), (0, -127, false, false, false, false, false, false, false, false), (0, -127, false, false, false, false, false, false, false, false), (0, -33, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (-96, 0, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (0, -127, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, -112, false, false, false, false, false, false, false, false), (0, -127, false, false, false, false, false, false, false, false), (0, -127, false, false, false, false, false, false, false, false), (0, -5, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, -123, false, false, false, false, false, false, false, false), (0, -127, false, false, false, false, false, false, false, false), (0, -127, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (-127, -127, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, true, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (2, 0, false, false, false, false, false, false, false, false), (63, 34, false, false, false, false, false, false, false, false), (127, 127, false, false, false, false, false, false, false, false), (127, 127, false, false, false, false, false, false, false, false), (127, 127, false, false, false, false, false, false, false, false), (127, 127, false, false, false, false, false, false, false, false), (68, 26, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false), (0, 0, false, false, false, false, false, false, false, false)};
    constexpr std::tuple<int, int, bool, bool, bool, bool, bool, bool, bool, bool>
    for (std::tuple<int, int, bool, bool, bool, bool, bool, bool, bool, bool> input: other_side_data) 
    {
        Robot::ghostdriver(0, 0, false, false, false, false, false, false, false, false, true, true);
        Robot::ghostdriver(input[0], input[1], input[2], input[3], input[4], input[5], input[6], input[7], input[8], input[9], false, false);

    }

};
